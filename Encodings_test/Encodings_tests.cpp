#include "stdafx.h"
#include "CppUnitTest.h"

#include "Base64.h"
#include "Md5.h"


using namespace Microsoft::VisualStudio::CppUnitTestFramework;
using namespace Base64;
using namespace Md5;


namespace Encodings_test
{

	TEST_CLASS(Encodings_tests)
	{
	public:
		
		TEST_METHOD(TestBase64)
		{
			std::string str1 = "Power overwhelming";		// length is 18 (18 % 3 == 0)
			std::string res1 = "UG93ZXIgb3ZlcndoZWxtaW5n";	// Generated by the independent base64 encoder

			std::string str2 = "Hello, world!";				// length is 13 (13 % 3 == 1)
			std::string res2 = "SGVsbG8sIHdvcmxkIQ==";		// Generated by the independent base64 encoder

			std::string str3 = "Show me the money";			// length is 17 (17 % 3 == 2)
			std::string res3 = "U2hvdyBtZSB0aGUgbW9uZXk=";	// Generated by the independent base64 encoder

			std::string tmp;
			
			tmp = Base64_Encode(str1);
			Assert::IsTrue(tmp.compare(res1) == 0, L"Base64 encoding error 1.");
			tmp = Base64_Decode(tmp);
			Assert::IsTrue(str1.compare(tmp) == 0, L"Base64 decoding error 1.");

			tmp = Base64_Encode(str2);
			Assert::IsTrue(tmp.compare(res2) == 0, L"Base64 encoding error 2.");
			tmp = Base64_Decode(tmp);
			Assert::IsTrue(str2.compare(tmp) == 0, L"Base64 decoding error 2.");

			tmp = Base64_Encode(str3);
			Assert::IsTrue(tmp.compare(res3) == 0, L"Base64 encoding error 3.");
			tmp = Base64_Decode(tmp);
			Assert::IsTrue(str3.compare(tmp) == 0, L"Base64 decoding error 3.");

			Logger::WriteMessage("Base64 encoding and decoding are OK.");
		}

		TEST_METHOD(TestMd5)
		{
			std::string str1 = "md5";								// 64 % str1.size() < 56
			std::string res1 = "1bc29b36f623ba82aaf6724fd3b16718";	// Generated by the independent Md5 encoder

			
			std::string str2 =										// 64 % str2.size() > 56
				"The quick brown fox jumps over the lazy dog higher and higher";
			std::string res2 = "0f2ef6ceb3b2e59447b2991d70ccda47";	// Generated by the independent Md5 encoder

			std::string str3 = "";									// Empty string test
			std::string res3 = "d41d8cd98f00b204e9800998ecf8427e";	// Generated by the independent Md5 encoder

			std::string str4 =										// Long string test
				"The quick brown fox jumps over the lazy dog higher and higher"
				"The quick brown fox jumps over the lazy dog higher and higher"
				"The quick brown fox jumps over the lazy dog higher and higher"
				"The quick brown fox jumps over the lazy dog higher and higher";
			std::string res4 = "9c1bfa3dbf0b1e999abf61ea3bf8a02a";	// Generated by the independent Md5 encoder

			std::string str;

			str = Md5_Encode(std::vector<uint8_t>(str1.begin(), str1.end()));
			Assert::IsTrue(str.compare(res1) == 0, L"Md5 encoding error 1.");

			str = Md5_Encode(std::vector<uint8_t>(str2.begin(), str2.end()));
			Assert::IsTrue(str.compare(res2) == 0, L"Md5 encoding error 2.");

			str = Md5_Encode(std::vector<uint8_t>(str3.begin(), str3.end()));
			Assert::IsTrue(str.compare(res3) == 0, L"Md5 encoding error 3.");

			str = Md5_Encode(std::vector<uint8_t>(str4.begin(), str4.end()));
			Assert::IsTrue(str.compare(res4) == 0, L"Md5 encoding error 4.");

			Logger::WriteMessage("Md5 encoding is OK.");
		}

	};

}
